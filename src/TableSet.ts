// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from 'flatbuffers';
/**
 * @constructor
 */
export namespace org.logyca.arrow.flatbuf {
  export class Table {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Table
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): Table {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };

    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Table= obj
     * @returns Table
     */
    static getRootAsTable(bb: flatbuffers.ByteBuffer, obj?: Table): Table {
      return (obj || new Table).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };

    /**
     * @param flatbuffers.Encoding= optionalEncoding
     * @returns string|Uint8Array|null
     */
    name(): string | null
    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
    name(optionalEncoding?: any): string | Uint8Array | null {
      var offset = this.bb!.__offset(this.bb_pos, 4);
      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    };

    /**
     * @returns number
     */
    size(): number {
      var offset = this.bb!.__offset(this.bb_pos, 6);
      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    };

    /**
     * @returns number
     */
    offset(): number {
      var offset = this.bb!.__offset(this.bb_pos, 8);
      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    };

    /**
     * @returns number
     */
    totalLength(): number {
      var offset = this.bb!.__offset(this.bb_pos, 10);
      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
    };

    /**
     * @param flatbuffers.Builder builder
     */
    static startTable(builder: flatbuffers.Builder) {
      builder.startObject(4);
    };

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset nameOffset
     */
    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
      builder.addFieldOffset(0, nameOffset, 0);
    };

    /**
     * @param flatbuffers.Builder builder
     * @param number size
     */
    static addSize(builder: flatbuffers.Builder, size: number) {
      builder.addFieldInt32(1, size, 0);
    };

    /**
     * @param flatbuffers.Builder builder
     * @param number offset
     */
    static addOffset(builder: flatbuffers.Builder, offset: number) {
      builder.addFieldInt32(2, offset, 0);
    };

    /**
     * @param flatbuffers.Builder builder
     * @param number totalLength
     */
    static addTotalLength(builder: flatbuffers.Builder, totalLength: number) {
      builder.addFieldInt32(3, totalLength, 0);
    };

    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    static endTable(builder: flatbuffers.Builder): flatbuffers.Offset {
      var offset = builder.endObject();
      return offset;
    };

  }
}
/**
 * @constructor
 */
export namespace org.logyca.arrow.flatbuf {
  export class Set {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Set
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): Set {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };

    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Set= obj
     * @returns Set
     */
    static getRootAsSet(bb: flatbuffers.ByteBuffer, obj?: Set): Set {
      return (obj || new Set).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };

    /**
     * @param number index
     * @param org.logyca.arrow.flatbuf.Table= obj
     * @returns org.logyca.arrow.flatbuf.Table
     */
    tables(index: number, obj?: org.logyca.arrow.flatbuf.Table): org.logyca.arrow.flatbuf.Table | null {
      var offset = this.bb!.__offset(this.bb_pos, 4);
      return offset ? (obj || new org.logyca.arrow.flatbuf.Table).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
    };

    /**
     * @returns number
     */
    tablesLength(): number {
      var offset = this.bb!.__offset(this.bb_pos, 4);
      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    };

    /**
     * @param flatbuffers.Builder builder
     */
    static startSet(builder: flatbuffers.Builder) {
      builder.startObject(1);
    };

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset tablesOffset
     */
    static addTables(builder: flatbuffers.Builder, tablesOffset: flatbuffers.Offset) {
      builder.addFieldOffset(0, tablesOffset, 0);
    };

    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    static createTablesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
      builder.startVector(4, data.length, 4);
      for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
      }
      return builder.endVector();
    };

    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    static startTablesVector(builder: flatbuffers.Builder, numElems: number) {
      builder.startVector(4, numElems, 4);
    };

    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    static endSet(builder: flatbuffers.Builder): flatbuffers.Offset {
      var offset = builder.endObject();
      return offset;
    };

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    static finishSetBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
      builder.finish(offset);
    };

  }
}
